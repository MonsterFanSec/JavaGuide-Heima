package com.itheima;

/*
 * 常见算法：
 * 	一、查找算法
 * 		1.基本查找
 * 		2.（折半/二分）查找
 * 			a.二分查找的优势？
 * 				提高查找效率
 * 			b.二分查找的前提条件？
 * 				数据必须是有序的
 * 				如果数据是乱的，先排序再用二分查找得到的索引没有实际意义，只能确定当前数字在数组中是否存在，因为泡洗之后数字的位置就可能发生变化了。
 * 			c.二分查找的过程
 * 				min和max表示当前要查找的范围
 * 				mid是在min和max中间的
 * 				如果要查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1
 * 				如果要查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1
 * 		3.分块查找
 * 		4.插值查找
 * 		5.斐波那契查找
 * 		6.树表查找
 * 		7.哈希查找
 *
 * 总结：
 * 		1.二分查找、插值查找、斐波那契查询各自的特点
 * 			相同点：都是通过不断的缩小范围来查找对应的数据
 * 			不同点：计算mid的方式不一样
 * 		2.二分查找：mid每次都是指向范围的中间位置
 * 	  	  插值查找：mid尽可能的靠近要查找的数据，但是要求数据尽可能的分布均匀
 * 		  斐波那契查找：根据黄金分割点来计算mid指向的位置
 *
 *
 * 二、排序算法
 * 		1.冒泡排序
 * 		2.选择排序
 * 		3.插入排序
 * 		4.快速排序
 * 		（剩余6个）
 *
 * 三、字符串匹配算法
 * 		1.基本查找
 * 		2.KMP算法
 */
public class Test {
}

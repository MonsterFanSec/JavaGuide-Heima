/*
 * 集合体系结构：(大写字母表示接口，小写字母表示实现类)
 * 		A、Collection
 * 			单列集合（添加数据的时候，每次只能单个数据）
 * 			AA.List
 * 				a.ArrayList
 * 				b.LinkedList
 * 				c.Vector(已淘汰)
 * 			BB.Set
 * 				a.HashSet
 * 					aa:LinkedHashSet
 * 				b.TreeSet
 * 		B、Map
 * 			双列结合（添加数据的时候，每次添加一对数据）
 *
 *
 * List系列集合：添加的元素是有序、可重复、有索引
 * 		有序：存的时候和取的时候顺序一致。
 * 			 如，存的时候为“张三”、“李四”、“王五”，则取的时候也为“张三”、“李四”、“王五”
 * Set系列集合：添加的元素是无序、不重复、无索引
 *
 *
 * Collection：
 * 		Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。
 *
 * 总结：
 * 		1.Collection是单列集合的顶层接口，所有方法被List和Set系列集合共享。
 *		2.常见成员方法：
 * 			add、clear、remove、contains、isEmpty、size
 * 		3.三种通用的遍历方式：
 * 			- 迭代器：在遍历的过程中需要删除元素，请使用迭代器。
 * 			- 增强for、Lambda：
 * 				仅仅想遍历，那么使用增强for或Lambda表达式。
 *
 * 	五种遍历方式对比：
 * 		1.迭代器遍历：
 * 			在遍历的过程中需要删除元素，请使用迭代器。
 * 		2.列表迭代器：
 * 			在遍历的过程中需要添加元素，请使用列表迭代器。
 * 		3/4.增强for遍历/Lambda表达式：
 * 			仅仅想遍历，那么使用增强for或Lambda表达式。
 * 		5.普通for:
 * 			如果遍历的时候想操作索引，可以用普通for。
 *
 *
 *  数据结构概述：
 * 		数据结构时计算机底层存储、组织数据的方式。
 * 		是指数据相互之间是以什么方式排列在一起的。
 * 		数据结构是为了更加方便的管理和使用数据，需要结合具体的业务场景来进行选择。
 * 		一般情况下，精心选择的数据结构可以带来更高的运行或者存储效率。
 *
 * 	关注：
 * 		1.每种数据结构长什么样子？
 * 		2.如何添加数据？
 * 		3.如何删除数据？
 *
 * 常见的数据结构：
 * 		1.栈
 * 			栈的特点：后劲先出，先进后出
 * 		2.队列
 * 			队列的特点：先进先出，后进后出
 * 		3.数组
 * 			数组的特点：内存连续区域，查询快，增删慢
 * 			数组是一种查询快，增删慢的模型
 * 			- 查询速度快：查询数据通过地址值和索引定位，查询任意数据耗时相同。（元素在内存中是连续存储的）
 * 			- 删除效率低：要将原始数据删除，同时后面每个数据前移。
 * 			- 添加效率极低：添加位置后的每个数据后移，再添加元素。
 * 		4.链表
 * 			链表的特点：元素是游离的，查询慢，首尾操作极快。
 * 			链表中的节点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址。
 * 			链表查询慢，无论查询哪个数据都要从头开始找。
 * 			链表增删相对快
 * 		5.二叉树
 * 		6.二叉查找树
 * 		7.平衡二叉树
 * 		8.红黑树
 */
public class Test {
}

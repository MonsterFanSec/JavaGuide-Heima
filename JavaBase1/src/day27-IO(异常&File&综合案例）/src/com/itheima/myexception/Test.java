package com.itheima.myexception;

/*
 * 异常：异常就是代表程序出现的问题
 *
 * 误区：不是让我们以后不出异常，而是程序除了异常之后，该如何处理
 *
 * Java.lang.Throwable
 * 	1.Error：
 * 		代表的系统级别错误（属于严重问题）
 * 		系统一旦出现问题，sun公司会把这些错误封装成Error对象
 * 		Error是sun公司自己用的，不是给我们程序员用的。
 * 		因此我们开发人员不用管它。
 * 	2.Exception:
 * 		叫做异常，代表程序可能出现的问题。
 * 		我们通常会用Exception以及他的子类来封装程序出现的问题。
 *
 * 		运行时异常：
 * 			RuntimeException及其子类，编译阶段不会出现异常提醒。
 * 			运行时出现的异常（如：数组索引越界异常）
 * 		编译时异常：
 * 			编译阶段就会出现异常提醒的。（如：日期解析异常）
 *
 *
 * 总结：
 * 	1.异常是什么？
 *		程序中可能出现的问题
 * 	2.异常体系的最上层父类是谁？异常分为几类？
 * 		父类：Exception。
 * 		异常分为两类：编译时异常、运行时异常
 *  3.编译时异常和运行时异常的区别？
 * 		编译时异常：没有继承RuntimeException的异常，直接继承于Exception。（即：除了RuntimeException和他的子类，其余都是编译时异常）
 * 				  编译阶段就会错误提示，需要进行处理，作用在于提醒程序员。
 * 		运行时异常：RuntimeException本身和子类，都是运行时异常。
 * 				  编译阶段没有错误提示，运行时出现的。
 * 				  一般是由于参数传递错误带来的问题。
 *
 * ===============================================================================================
 *
 * 异常的作用：
 * 	作用一：异常是用来查询bug的关键参考信息
 * 	作用二：异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况
 *
 */
public class Test {
}

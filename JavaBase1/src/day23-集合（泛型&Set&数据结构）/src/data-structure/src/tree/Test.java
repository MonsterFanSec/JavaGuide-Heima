package tree;

/*
 *	ArrayList:
 * 		Array：数组；
 * 		List：属于List系列的一员
 *
 * 	LinkedList：
 * 		Linked：链表
 * 		List：属于List系列的一员
 *
 *  HashSet:
 * 		Hash：哈希表
 * 		Set：属于Set系列的一员
 *
 * 	TreeSet：
 * 		Tree：树
 * 		Set：属于Set系列的一员
 *
 * 	LinkedHashSet：
 * 		Linked：链表
 * 		HashSet：父类
 *
 *
 * 数据结构（树）：
 * 		结点/节点（Node）：节点地址没有的时候记为null
 * 			父节点地址
 * 			值
 * 			左子节点地址
 * 			右子节点地址
 *
 * 		度：每一个节点的子节点数量
 * 		二叉树中，任意节点的度 <= 2
 *
 * 数据结构（二叉查找树）：
 * 		二叉查找树，又称二叉排序树或者二叉搜索树
 *
 * 		- 每一个节点上最多有两个子节点
 * 		- 任意节点左子树上的值都小于当前节点
 * 		- 任意节点右子树上的值都大于当前节点
 *
 * 数据结构（二叉查找树）添加节点：
 * 	规则：
 * 		- 小的存左边
 * 		- 大的存右边
 * 		- 一样的不存
 *
 * 数据结构（二叉树）遍历方式：
 * 		1.前序遍历
 * 			从根节点开始，然后按照当前节点，左子节点，右子节点的顺序遍历
 * 		2.中序遍历【重点】
 * 			从最左边的子节点开始，然后按照左子节点，当前节点，右子节点的顺序遍历
 * 		3.后序遍历
 * 			从最左边的子节点开始，然后按照左子节点，右子节点，当前节点的顺序遍历
 * 		4.层序遍历
 * 			一层一层的去遍历
 *
 * 数据结构（平衡二叉树）：
 * 		规则：任意节点左右子树高度差不超过1
 *
 * 数据结构（平衡二叉树）旋转机制：
 * 		规则1：左旋
 * 		规则2：右旋
 * 		触发时机：当添加一个节点之后，该树不再是一颗平衡二叉树
 *
 * 数据结构（平衡二叉树）左旋：
 * 		确定支点：从添加的节点开始，不断的往父节点找不平衡的节点
 * 		步骤：
 * 			以不平衡的点作为支点
 * 			把支点左旋降级，变成左子节点：就是将根节点的右侧往左拉
 * 			晋升原来的右子节点：原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当作右子节点
 *
 * 数据结构（平衡二叉树）右旋：
 * 		确定支点：从添加的节点开始，不断的往父节点找不平衡的节点
 * 		步骤：
 * 			以不平衡的点作为支点
 * 			把支点右旋降级，变成右子节点：就是将根节点的左侧往右拉
 * 			晋升原来的左子节点：原先的左子节点变成新的父节点，并把多余的右子节点出让，给已经降级的根节点当作左子节点
 */
public class Test {
}

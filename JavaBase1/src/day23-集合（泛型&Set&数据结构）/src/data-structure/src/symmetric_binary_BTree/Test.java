package symmetric_binary_BTree;

/*
 * 数据结构（红黑树）
 * 		- 红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。
 * 		- 1972年出现，当时被称之为平衡二叉B树。后来，1978年被修改为如今的“红黑树”。
 * 		- 它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色。
 * 		- 每一个节点可以是红或者黑；红黑树不是高度平衡的，它的平衡是通过“红黑规则”进行实现的。
 *
 * 平衡二叉树：
 * 		- 高度平衡
 * 		- 当左右子树高度差超过1时，通过旋转保持平衡
 *
 * 红黑树：
 * 		- 是一个二叉查找树
 * 		- 但是不是高度平衡的
 * 		- 条件：特有的红黑规则
 *
 * 数据结构（红黑树）红黑规则：
 * 		1.每一个节点或是红色的，或者是黑色的
 * 		2.根节点必须是黑色
 * 		3.如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点（Nil）是黑色的
 * 		4.如果某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）
 * 		5.对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。
 *			后代：这个节点的所有子节点
 * 			叶节点：所有的叶子节点，在这里指的就是Nil节点
 * 			简单路径：两个节点直接只走过一次
 *
 *
 * 数据结构（红黑树）添加节点的规则：
 * 		————红黑树在添加节点的时候，添加的节点默认是红色的
 * 		默认颜色：添加节点默认是红色的（效率高）
 */
public class Test {
}
